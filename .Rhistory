table(res)
table(trueClass)
demDf$speech[1]
newt <- demDf$speech[1]
nd1 <- dfm(newt, keptFeatures = demDfm) %>% removeFeatures(stopwords('english')) %>% tfidf %>% as.matrix
nd1[is.nan(nd1)] = 0
predict(e1, nd1, s = "lambda.min", type = "class")
View(nd1)
tail(colnames(nd1))
tail(colnames(demMat))
tail(colnames(dmat))
?predict.cv.glmnet
?predict
?predict.glmnet
res <- predict(e1, dmat, type = "class")
View(res)
predict(e1, nd1,  type = "class")
newt <- "Sanders is a good man. When I am president I will patronize him some more."
predict(e1, nd1,  type = "class")
predict(e1, nd1,  type = "class")
predict(e1, nd1, s = "lambda.min", type = "class")
e1
summary(e1)
dmat[1,]
dmat[1,][dmat[1,] > 0.0]
res <- predict(e1, dmat[1,], s = "lambda.min", type = "class")
res <- predict(e1, dmat[,1], s = "lambda.min", type = "class")
res <- predict(e1, dmat[1,], s = "lambda.min", type = "class")
res <- predict(e1, as.matrix(dmat[1,]), s = "lambda.min", type = "class")
class(dmatp1,)
class(dmat[1,])
class(dmat[1,, drop=FALSE])
res <- predict(e1, dmat[1,,drop=FALSE]), s = "lambda.min", type = "class")
res <- predict(e1, dmat[1,,drop=FALSE], s = "lambda.min", type = "class")
res
nd1
demDfm <- dfm(demDf$speech) %>% trim(minDoc=4) %>% removeFeatures(stopwords('english'))
dmat <- as.matrix(demDfm)
dim(dmat)
length(trueClass)
e1 <- cv.glmnet(dmat, y=trueClass,  family = 'binomial', alpha=0.05, type.measure='class', standardize=TRUE)
plot(e1)
min(e1$cvm)
summary(e1)
cmat <- as.matrix(coef(e1, s = "lambda.min"))
coes <- data.frame(estimate=cmat[,1], words=row.names(cmat) ) %>% arrange(estimate)
head(coes, 15)
head(coes, 30)
tail(coes, 30)
newt <- "Sanders is a good man. When I am president I will patronize him some more."
nd1 <- dfm(newt, keptFeatures = demDfm) %>% removeFeatures(stopwords('english')) %>% as.matrix
predict(e1, nd1, s = "lambda.min", type = "class")
newt <- "millions of jails control"
predict(e1, nd1, s = "lambda.min", type = "class")
nd1 <- dfm(newt, keptFeatures = demDfm) %>% removeFeatures(stopwords('english')) %>% as.matrix
nd1[is.nan(nd1)] = 0
predict(e1, nd1, s = "lambda.min", type = "class")
predict(e1, nd1, s = "lambda.min", type = "mae")
?predict.cv.glmnet
predict(e1, nd1, s = "lambda.min", type = "response")
newt <- "Sanders is a good man. When I am president I will patronize him some more."
nd1 <- dfm(newt, keptFeatures = demDfm) %>% removeFeatures(stopwords('english')) %>% as.matrix
nd1[is.nan(nd1)] = 0
predict(e1, nd1, s = "lambda.min", type = "class")
predict(e1, nd1, s = "lambda.min", type = "response")
coDict<- data.frame(word=rownames(coes), co=coes[1])  %>% filter(X1 !=0) %>% filter(word!='(Intercept)')
coes <- data.frame(estimate=cmat[,1], words=row.names(dmat) ) %>% arrange(estimate)
coes <- data.frame(estimate=cmat[,1], words=row.names(cmat) ) %>% arrange(estimate)
coDict<- data.frame(word=rownames(coes), co=coes[1])  %>% filter(X1 !=0) %>% filter(word!='(Intercept)')
View(coes)
View(coes)
coDict$one<- ifelse(coDict$estimate > 0, coDict$estimate, 0)
coDict<- data.frame(word=rownames(coes), co=coes[1])  %>% filter(estimate !=0) %>% filter(word!='(Intercept)')
coDict$one<- ifelse(coDict$estimate > 0, coDict$estimate, 0)
coDict$zero <- ifelse(coDict$estimate < 0, coDict$estimate, 0)
wct <- data.frame(Pro=coDict$pro, anti=coDict$anti)
wordcloud::comparison.cloud((as.matrix(wct)),title.size=1.5,
random.order=FALSE, max.words=70, rot.per=0.01)
wordcloud::comparison.cloud((as.matrix(wct)),title.size=1.5,
random.order=FALSE, max.words=70, rot.per=0.01)
wct <- data.frame(Pro=coDict$pro, anti=coDict$anti)
cmat <- as.matrix(coef(e1, s = "lambda.min"))
coes <- data.frame(estimate=cmat[,1], words=row.names(cmat) ) %>% arrange(estimate)
wct <- data.frame(one=coDict$one, zero=coDict$zero)
wordcloud::comparison.cloud((as.matrix(wct)),title.size=1.5,
random.order=FALSE, max.words=70, rot.per=0.01)
View(wct)
row.names(cmat)
View(coDict)
coDict$one<- ifelse(coDict$estimate > 0, coDict$estimate, 0)
coDict$zero <- ifelse(coDict$estimate < 0, coDict$estimate, 0)
View(coDict)
wct <- data.frame(one=coDict$one, zero=coDict$zero)
wordcloud::comparison.cloud((as.matrix(wct)),title.size=1.5,
random.order=FALSE, max.words=70, rot.per=0.01)
View(wct)
rownames(wct) <- coDict$word
wordcloud::comparison.cloud((as.matrix(wct)),title.size=1.5,
random.order=FALSE, max.words=70, rot.per=0.01)
coDict<- data.frame(word=rownames(coes), co=coes[1])  %>% filter(estimate !=0) %>% filter(word!='(Intercept)')
View(coDict)
cmat <- as.matrix(coef(e1, s = "lambda.min"))
coes <- data.frame(estimate=cmat[,1], words=row.names(cmat) ) %>% arrange(estimate)
View(coes)
coDict<- data.frame(word=rownames(coes), co=coes[1])  %>% filter(estimate !=0) %>% filter(word!='(Intercept)')
coDict$one<- ifelse(coDict$estimate > 0, coDict$estimate, 0)
coDict$zero <- ifelse(coDict$estimate < 0, coDict$estimate, 0)
wct <- data.frame(one=coDict$one, zero=coDict$zero)
rownames(wct) <- coDict$word
wordcloud::comparison.cloud((as.matrix(wct)),title.size=1.5,
random.order=FALSE, max.words=70, rot.per=0.01)
cmat <- as.matrix(coef(e1, s = "lambda.min"))
rownames(coes)
coDict<- data.frame(word=coes$words, co=coes[1])  %>% filter(estimate !=0) %>% filter(word!='(Intercept)')
View(coDict)
coDict$one<- ifelse(coDict$estimate > 0, coDict$estimate, 0)
coDict$zero <- ifelse(coDict$estimate < 0, coDict$estimate, 0)
wct <- data.frame(one=coDict$one, zero=coDict$zero)
rownames(wct) <- coDict$word
wordcloud::comparison.cloud((as.matrix(wct)),title.size=1.5,
random.order=FALSE, max.words=70, rot.per=0.01)
wordcloud::comparison.cloud((as.matrix(wct)),title.size=1.5,
random.order=FALSE, rot.per=0.01)
wordcloud::comparison.cloud((as.matrix(wct)),title.size=1.5,
random.order=FALSE, rot.per=0.01)
?weight
demDfm <- dfm(demDf$speech) %>% trim(minDoc=4) %>% removeFeatures(stopwords('english')) %>% weight(type="logFreq")
dmat <- as.matrix(demDfm)
dim(dmat)
length(trueClass)
e1 <- cv.glmnet(dmat, y=trueClass,  family = 'binomial', alpha=0.05, type.measure='class', standardize=TRUE)
plot(e1)
min(e1$cvm)
summary(e1)
plot(e1$glmnet.fit)
cmat <- as.matrix(coef(e1, s = "lambda.min"))
coes <- data.frame(estimate=cmat[,1], words=row.names(cmat) ) %>% arrange(estimate)
coDict<- data.frame(word=coes$words, co=coes[1])  %>% filter(estimate !=0) %>% filter(word!='(Intercept)')
View(coDict)
coDict$one<- ifelse(coDict$estimate > 0, coDict$estimate, 0)
coDict$zero <- ifelse(coDict$estimate < 0, coDict$estimate, 0)
wct <- data.frame(one=coDict$one, zero=coDict$zero)
rownames(wct) <- coDict$word
wordcloud::comparison.cloud((as.matrix(wct)),title.size=1.5,
random.order=FALSE, rot.per=0.01)
require(quanteda)
require(magrittr)
require(dplyr)
require(tidyr)
require(wordcloud)
require(glmnet)
load(url("http://www.kenbenoit.net/files/presDebateCorpus2016seg.RData"))
# put data in dataframe too
presDebateDf <- cbind(speech = texts(presDebateCorpus2016seg), docvars(presDebateCorpus2016seg), stringsAsFactors = FALSE)
############
# 1.  Simple comparison clouds
#
# The color and size of the word is determined by the difference in rates of occurrence across the
# two categories (see ?comparison.cloud)
############
# convenience function to set good cloud parameters
qCloud <- function(dat){
wordcloud::comparison.cloud(t(dat), title.size=1.3, random.order=FALSE, rot.per = 0, max.terms = 50)
}
presDebateMat <- dfm(presDebateCorpus2016seg, groups = 'party') %>%
removeFeatures(stopwords('english')) %>% trim(minCount = 5) %>% as.matrix
qCloud(presDebateMat)
?comparison.cloud
wordcloud::comparison.cloud(t(presDebateMat), title.size=1.3, random.order=FALSE, rot.per = 0, max.terms = 20)
wordcloud::comparison.cloud(t(presDebateMat), title.size=1.3, random.order=FALSE, rot.per = 0, max.terms = 5)
?comparison.cloud
wordcloud::comparison.cloud(t(presDebateMat), title.size=1.3, random.order=FALSE, rot.per = 0, max.words = 5)
wordcloud::comparison.cloud(t(presDebateMat), title.size=1.3, random.order=FALSE, rot.per = 0, max.words = 50)
wordcloud::comparison.cloud(t(presDebateMat), title.size=1.3, random.order=FALSE, rot.per = 0, max.words = 100)
demCorpus <- subset(presDebateCorpus2016seg, tag %in% c('SANDERS', 'CLINTON'))
demMat <- dfm(demCorpus, groups = 'tag') %>%
removeFeatures(stopwords('english')) %>% trim(minCount = 5) %>% as.matrix
wordcloud::comparison.cloud(t(presDebateMat), title.size=1.3, random.order=FALSE, rot.per = 0, max.words = 100)
demCorpus <- subset(presDebateCorpus2016seg, tag %in% c('SANDERS', 'CLINTON'))
demMat <- dfm(demCorpus, groups = 'tag') %>%
removeFeatures(stopwords('english')) %>% trim(minCount = 5) %>% as.matrix
wordcloud::comparison.cloud(t(demMat), title.size=1.3, random.order=FALSE, rot.per = 0, max.words = 100)
demCorpus <- subset(presDebateCorpus2016seg, tag %in% c('SANDERS', 'CLINTON'))
demMat <- dfm(demCorpus, groups = 'tag') %>% tfidf %>%
removeFeatures(stopwords('english')) %>% trim(minCount = 5) %>% as.matrix
wordcloud::comparison.cloud(t(demMat), title.size=1.3, random.order=FALSE, rot.per = 0, max.words = 100)
demCorpus <- subset(presDebateCorpus2016seg, tag %in% c('SANDERS', 'CLINTON'))
demMat <- dfm(demCorpus, groups = 'tag') %>% tfidf %>%
removeFeatures(stopwords('english')) %>% trim(minCount = 5) %>% as.matrix
wordcloud::comparison.cloud(t(demMat), title.size=1.3, random.order=FALSE, rot.per = 0, max.words = 100)
# democratic candidates
demCorpus <- subset(presDebateCorpus2016seg, tag %in% c('SANDERS', 'CLINTON'))
demMat <- dfm(demCorpus, groups = 'tag') %>% weight(logFreq) %>%
removeFeatures(stopwords('english')) %>% trim(minCount = 5) %>% as.matrix
wordcloud::comparison.cloud(t(demMat), title.size=1.3, random.order=FALSE, rot.per = 0, max.words = 100)
demCorpus <- subset(presDebateCorpus2016seg, tag %in% c('SANDERS', 'CLINTON'))
demMat <- dfm(demCorpus, groups = 'tag') %>%
removeFeatures(stopwords('english')) %>% trim(minCount = 5) %>% as.matrix
wordcloud::comparison.cloud(t(demMat), title.size=1.3, random.order=FALSE, rot.per = 0, max.words = 100)
demCorpus <- subset(presDebateCorpus2016seg, tag %in% c('SANDERS', 'CLINTON', 'OMALLEY'))
demMat <- dfm(demCorpus, groups = 'tag') %>%
removeFeatures(stopwords('english')) %>% trim(minCount = 5) %>% as.matrix
wordcloud::comparison.cloud(t(demMat), title.size=1.3, random.order=FALSE, rot.per = 0, max.words = 100)
summary(presDebateCorpus2016seg)
demCorpus <- subset(presDebateCorpus2016seg, tag %in% c('SANDERS', 'CLINTON', 'O\'MALLEY'))
df1 <- cbind(speech = texts(presDebateCorpus2016seg), docvars(presDebateCorpus2016seg))
demCorpus <- subset(presDebateCorpus2016seg, tag %in% c('SANDERS', 'CLINTON', 'O\'MALLEY'))
demDf <- cbind(speech = texts(demCorpus), docvars(demCorpus), stringsAsFactors = FALSE)
demCorpus <- subset(presDebateCorpus2016seg, tag %in% c('SANDERS', 'CLINTON', 'O\'MALLEY'))
demMat <- dfm(demCorpus, groups = 'tag') %>%
removeFeatures(stopwords('english')) %>% trim(minCount = 5) %>% as.matrix
wordcloud::comparison.cloud(t(demMat), title.size=1.3, random.order=FALSE, rot.per = 0, max.words = 100)
repCorpus <- subset(presDebateCorpus2016seg, tag %in% c('TRUMP', 'RUBIO', 'CRUZ', 'BUSH'))
repMat <- dfm(repCorpus, groups = 'tag') %>%
removeFeatures(stopwords('english')) %>% trim(minCount = 5) %>% as.matrix
wordcloud::comparison.cloud(t(repMat), title.size=1.3, random.order=FALSE, rot.per = 0, max.words = 100)
wordcloud::comparison.cloud(t(repMat), title.size=1.3, random.order=FALSE, rot.per = 0, max.words = 200)
trumpFactor <- ifelse(docvars(repCorpus, tag)=='TRUMP', 'TRUMP', 'OTHER')
trumpFactor <- ifelse(docvars(repCorpus, 'tag')=='TRUMP', 'TRUMP', 'OTHER')
?docvars
docvars(repCorpus, trumpFactor) <- trumpFactor
repMat <- dfm(repCorpus, groups = 'trumpFactor') %>%
removeFeatures(stopwords('english')) %>% trim(minCount = 5) %>% as.matrix
wordcloud::comparison.cloud(t(repMat), title.size=1.3, random.order=FALSE, rot.per = 0, max.words = 200)
repMat <- dfm(repCorpus, groups = 'trumpFactor') %>%
removeFeatures(stopwords('english')) %>% trim(minCount = 5) %>% as.matrix
docvars(repCorpus)
tmp <- docvars(repCorpus)
View(tmp)
repCorpus <- subset(presDebateCorpus2016seg, tag %in% c('TRUMP', 'RUBIO', 'CRUZ', 'BUSH'))
repMat <- dfm(repCorpus, groups = 'tag') %>%
removeFeatures(stopwords('english')) %>% trim(minCount = 5) %>% as.matrix
wordcloud::comparison.cloud(t(repMat), title.size=1.3, random.order=FALSE, rot.per = 0, max.words = 200)
# Trump v others
trumpFactor <- ifelse(docvars(repCorpus, 'tag')=='TRUMP', 'TRUMP', 'OTHER')
docvars(repCorpus, 'trumpFactor') <- trumpFactor
repMat <- dfm(repCorpus, groups = 'trumpFactor') %>%
removeFeatures(stopwords('english')) %>% trim(minCount = 5) %>% as.matrix
wordcloud::comparison.cloud(t(repMat), title.size=1.3, random.order=FALSE, rot.per = 0, max.words = 200)
extra <- c('going', 'said', 'need', 'know')
?removeFeatures
repCorpus <- subset(presDebateCorpus2016seg, tag %in% c('TRUMP', 'RUBIO', 'CRUZ', 'BUSH'))
repMat <- dfm(repCorpus, groups = 'tag') %>%
removeFeatures(c(stopwords('english'), extra)) %>% trim(minCount = 5) %>% as.matrix
wordcloud::comparison.cloud(t(repMat), title.size=1.3, random.order=FALSE, rot.per = 0, max.words = 200)
extra <- c('going', 'said', 'need', 'know', 'say', 'many', 'now', 'will')
# compare parties
presDebateMat <- dfm(presDebateCorpus2016seg, groups = 'party') %>%
removeFeatures(stopwords('english')) %>% trim(minCount = 5) %>% as.matrix
wordcloud::comparison.cloud(t(presDebateMat), title.size=1.3, random.order=FALSE, rot.per = 0, max.words = 100)
# democratic candidates
demCorpus <- subset(presDebateCorpus2016seg, tag %in% c('SANDERS', 'CLINTON', 'O\'MALLEY'))
demMat <- dfm(demCorpus, groups = 'tag') %>%
removeFeatures(stopwords('english')) %>% trim(minCount = 5) %>% as.matrix
wordcloud::comparison.cloud(t(demMat), title.size=1.3, random.order=FALSE, rot.per = 0, max.words = 100)
extra <- c('going', 'said', 'need', 'know', 'say', 'many', 'now', 'will', 'actually')
# democratic candidates
demCorpus <- subset(presDebateCorpus2016seg, tag %in% c('SANDERS', 'CLINTON', 'O\'MALLEY'))
demMat <- dfm(demCorpus, groups = 'tag') %>%
removeFeatures(c(stopwords('english'), extra)) %>% trim(minCount = 5) %>% as.matrix
wordcloud::comparison.cloud(t(demMat), title.size=1.3, random.order=FALSE, rot.per = 0, max.words = 100)
wordcloud::comparison.cloud(t(demMat), title.size=1.3, random.order=FALSE, rot.per = 0, max.words = 200)
repCorpus <- subset(presDebateCorpus2016seg, tag %in% c('TRUMP', 'RUBIO', 'CRUZ', 'BUSH'))
trumpFactor <- ifelse(docvars(repCorpus, 'tag') == 'TRUMP', 'TRUMP', 'OTHER')
docvars(repCorpus, 'trumpFactor') <- trumpFactor
repMat <- dfm(repCorpus, groups = 'trumpFactor') %>%
removeFeatures(c(stopwords('english'), extra)) %>% trim(minCount = 5) %>% as.matrix
wordcloud::comparison.cloud(t(repMat), title.size=1.3, random.order=FALSE, rot.per = 0, max.words = 200)
extra <- c('going', 'said', 'need', 'know', 'say', 'many', 'now', 'will', 'actually', 'want', 'like')
trumpFactor <- ifelse(docvars(repCorpus, 'tag') == 'TRUMP', 'TRUMP', 'OTHER')
docvars(repCorpus, 'trumpFactor') <- trumpFactor
repMat <- dfm(repCorpus, groups = 'trumpFactor') %>%
removeFeatures(c(stopwords('english'), extra)) %>% trim(minCount = 5) %>% as.matrix
wordcloud::comparison.cloud(t(repMat), title.size=1.3, random.order=FALSE, rot.per = 0, max.words = 200)
?subset.corpus
summary(corpus)
summary(presDebateCorpus2016seg)
repDf <- cbind(speech = texts(repCorpus), docvars(repCorpus), stringsAsFactors = FALSE)
repDf <- filter(repDf, nchar(speech) > 30)
trueClass <- as.factor(demDf$tag)
trueClass <- as.factor(repDf$trumpFactor)
repDfm <- dfm(repDf$speech) %>% trim(minDoc=5) %>% removeFeatures(c(stopwords('english'), extra)) %>% weight(type="logFreq")
dmat <- as.matrix(demDfm)
repMat <- as.matrix(repDfm)
dim(repMat)
length(trueClass)
eModel <- cv.glmnet(dmat, y=trueClass,  family = 'binomial', alpha=0.05, type.measure='class', standardize=TRUE)
eModel <- cv.glmnet(repMat, y=trueClass,  family = 'binomial', alpha=0.05, type.measure='class', standardize=TRUE)
plot(e1)
plot(eModel)
min(eModel$cvm)
plot(eModel$glmnet.fit)
min(eModel$cvm)
table(trueClass)
table(trueClass)
plot(eModel)
repDfm <- dfm(repDf$speech) %>% trim(minDoc=4) %>%
removeFeatures(c(stopwords('english'), extra))
repMat <- as.matrix(repDfm)
dim(repMat)
length(trueClass)
trueClass <- as.factor(repDf$trumpFactor)
table(trueClass)
eModel <- cv.glmnet(repMat, y=trueClass,  family = 'binomial', alpha=0.05, type.measure='class', standardize=TRUE)
plot(eModel)
plot(eModel$glmnet.fit)
min(eModel$cvm)
plot(eModel$glmnet.fit, xvar='dev')
min(eModel$cvm)
repDfm <- dfm(repDf$speech) %>% trim(minDoc=4) %>% weight(type='logFreq')
removeFeatures(c(stopwords('english'), extra))
repDfm <- dfm(repDf$speech) %>% trim(minDoc=4) %>% weight(type='logFreq')
removeFeatures(c(stopwords('english'), extra))
repDfm <- dfm(repDf$speech) %>% trim(minDoc=4) %>% weight(type='logFreq') %>%
removeFeatures(c(stopwords('english'), extra))
repMat <- as.matrix(repDfm)
dim(repMat)
length(trueClass)
trueClass <- as.factor(repDf$trumpFactor)
table(trueClass)
eModel <- cv.glmnet(repMat, y=trueClass,  family = 'binomial', alpha=0.05, type.measure='class', standardize=TRUE)
plot(eModel)
plot(eModel$glmnet.fit, xvar='dev')
min(eModel$cvm)
function (x)
trueClass <- as.factor(repDf$trumpFactor)
table(trueClass)
eModel <- cv.glmnet(repMat, y=trueClass,  family = 'binomial', alpha=1, type.measure='class', standardize=TRUE)
plot(eModel)
plot(eModel$glmnet.fit, xvar='dev')
min(eModel$cvm)
eModel <- cv.glmnet(repMat, y=trueClass,  family = 'binomial', alpha=0.01, type.measure='class', standardize=TRUE)
plot(eModel)
plot(eModel$glmnet.fit, xvar='dev')
min(eModel$cvm)
summary(e1)
cmat <- as.matrix(coef(eModel, s = "lambda.min"))
coes <- data.frame(estimate=cmat[,1], words=row.names(cmat) ) %>% arrange(estimate)
coDict<- data.frame(word=coes$words, co=coes[1])  %>% filter(estimate !=0) %>% filter(word!='(Intercept)')
coDict$one<- ifelse(coDict$estimate > 0, coDict$estimate, 0)
coDict$zero <- ifelse(coDict$estimate < 0, coDict$estimate, 0)
wct <- data.frame(one=coDict$one, zero=coDict$zero)
rownames(wct) <- coDict$word
wordcloud::comparison.cloud((as.matrix(wct)),title.size=1.5,
random.order=FALSE, rot.per=0.01)
View(coDict)
wordcloud::comparison.cloud((as.matrix(wct)),title.size=1.5,
random.order=FALSE, rot.per=0.01)
wordcloud::comparison.cloud((as.matrix(wct)),title.size=1.5, random.order=FALSE, rot.per=0, scale=(c(0,1)))
wordcloud::comparison.cloud((as.matrix(wct)),title.size=1.5, random.order=FALSE, rot.per=0, scale=(c(1,5)))
wordcloud::comparison.cloud((as.matrix(wct)),title.size=1.5, random.order=FALSE, rot.per=0, max.words=100)
wordcloud::comparison.cloud((as.matrix(wct)),title.size=1.5, random.order=FALSE, rot.per=0, max.words=200)
repDfm <- dfm(repDf$speech) %>% trim(minDoc=4) %>%
removeFeatures(c(stopwords('english'), extra))
repMat <- as.matrix(repDfm)
dim(repMat)
length(trueClass)
trueClass <- as.factor(repDf$trumpFactor)
table(trueClass)
eModel <- cv.glmnet(repMat, y=trueClass,  family = 'binomial', alpha=0.04, type.measure='class', standardize=TRUE)
plot(eModel)
plot(eModel, label=TRUE)
plot(eModel)
plot(eModel)
plot(eModel$glmnet.fit, xvar='dev')
min(eModel$cvm)
cmat <- as.matrix(coef(eModel, s = "lambda.min"))
coes <- data.frame(estimate=cmat[,1], words=row.names(cmat) ) %>% arrange(estimate)
coDict<- data.frame(word=coes$words, co=coes[1])  %>% filter(estimate !=0) %>% filter(word!='(Intercept)')
coDict$one<- ifelse(coDict$estimate > 0, coDict$estimate, 0)
coDict$zero <- ifelse(coDict$estimate < 0, coDict$estimate, 0)
wct <- data.frame(one=coDict$one, zero=coDict$zero)
rownames(wct) <- coDict$word
wordcloud::comparison.cloud((as.matrix(wct)),title.size=1.5, random.order=FALSE, rot.per=0, max.words=200)
View(wct)
repDfm <- dfm(repDf$speech) %>% trim(minDoc=8) %>%
removeFeatures(c(stopwords('english'), extra))
repMat <- as.matrix(repDfm)
dim(repMat)
length(trueClass)
trueClass <- as.factor(repDf$trumpFactor)
table(trueClass)
eModel <- cv.glmnet(repMat, y=trueClass,  family = 'binomial', alpha=0.04, type.measure='class', standardize=TRUE)
plot(eModel)
plot(eModel$glmnet.fit, xvar='dev')
min(eModel$cvm)
cmat <- as.matrix(coef(eModel, s = "lambda.min"))
coes <- data.frame(estimate=cmat[,1], words=row.names(cmat) ) %>% arrange(estimate)
coDict<- data.frame(word=coes$words, co=coes[1])  %>% filter(estimate !=0) %>% filter(word!='(Intercept)')
coDict$one<- ifelse(coDict$estimate > 0, coDict$estimate, 0)
coDict$zero <- ifelse(coDict$estimate < 0, coDict$estimate, 0)
wct <- data.frame(one=coDict$one, zero=coDict$zero)
rownames(wct) <- coDict$word
wordcloud::comparison.cloud((as.matrix(wct)),title.size=1.5, random.order=FALSE, rot.per=0, max.words=200)
View(tmp)
View(wct)
contrasts(trueClass)
wct <- data.frame(Trump=coDict$one, Other=coDict$zero)
rownames(wct) <- coDict$word
wordcloud::comparison.cloud((as.matrix(wct)),title.size=1.5, random.order=FALSE, rot.per=0, max.words=200)
nt <- "I have a tremendous brain. I know many of the finest businesses. "
nd1 <- dfm(nt, keptFeatures = repDfm) %>% removeFeatures(c(stopwords('english'), extra)) %>% as.matrix
predict(e1, nd1, s = "lambda.min", type = "response")
predict(eModel, nd1, s = "lambda.min", type = "response")
nt <- "I believe that American families have a right to hard-working immigrants. "
nd1 <- dfm(nt, keptFeatures = repDfm) %>% removeFeatures(c(stopwords('english'), extra)) %>% as.matrix
nd1[is.nan(nd1)] = 0
predict(eModel, nd1, s = "lambda.min", type = "response")
install.packages('shiny')
require(quanteda)
require(magrittr)
require(dplyr)
require(tidyr)
require(wordcloud)
require(glmnet)
load(url("http://www.kenbenoit.net/files/presDebateCorpus2016seg.RData"))
# put data in dataframe too
presDebateDf <- cbind(speech = texts(presDebateCorpus2016seg), docvars(presDebateCorpus2016seg), stringsAsFactors = FALSE)
extra <- c('going', 'said', 'need', 'know', 'say', 'many', 'now', 'will', 'actually', 'want', 'like')
require(shiny)
runExample("01_hello")
require(shiny)
runApp('shinyHack')
getwd()
setwd("~/Dropbox/hackathon")
setwd("~/Dropbox/hackathon")
require(shiny)
runApp('shinyHack')
?fluidRow
save(eModel, 'trumpModel.RData')
?save
save(eModel, file='trumpModel.RData')
eModel <- cv.glmnet(repMat, y=trueClass,  family = 'binomial', alpha=0.04, type.measure='class', standardize=TRUE)
repDf <- cbind(speech = texts(repCorpus), docvars(repCorpus), stringsAsFactors = FALSE)
repCorpus <- subset(presDebateCorpus2016seg, tag %in% c('TRUMP', 'RUBIO', 'CRUZ', 'BUSH'))
repMat <- dfm(repCorpus, groups = 'tag') %>%
removeFeatures(c(stopwords('english'), extra)) %>% trim(minCount = 5) %>% as.matrix
wordcloud::comparison.cloud(t(repMat), title.size=1.3, random.order=FALSE, rot.per = 0, max.words = 200)
repDf <- cbind(speech = texts(repCorpus), docvars(repCorpus), stringsAsFactors = FALSE)
repDf <- filter(repDf, nchar(speech) > 30)
repDfm <- dfm(repDf$speech) %>% trim(minDoc=8) %>%
removeFeatures(c(stopwords('english'), extra))
repMat <- as.matrix(repDfm)
dim(repMat)
length(trueClass)
trueClass <- as.factor(repDf$trumpFactor)
trueClass <- as.factor(repDf$trumpFactor)
table(trueClass)
trumpFactor <- ifelse(docvars(repCorpus, 'tag') == 'TRUMP', 'TRUMP', 'OTHER')
docvars(repCorpus, 'trumpFactor') <- trumpFactor
repMat <- dfm(repCorpus, groups = 'trumpFactor') %>%
removeFeatures(c(stopwords('english'), extra)) %>% trim(minCount = 5) %>% as.matrix
trueClass <- as.factor(repDf$trumpFactor)
dim(repMat)
length(trueClass)
trumpFactor <- ifelse(docvars(repCorpus, 'tag') == 'TRUMP', 'TRUMP', 'OTHER')
docvars(repCorpus, 'trumpFactor') <- trumpFactor
repDf <- cbind(speech = texts(repCorpus), docvars(repCorpus), stringsAsFactors = FALSE)
repDf <- filter(repDf, nchar(speech) > 30)
repDfm <- dfm(repDf$speech) %>% trim(minDoc=8) %>%
removeFeatures(c(stopwords('english'), extra))
repMat <- as.matrix(repDfm)
dim(repMat)
length(trueClass)
trueClass <- as.factor(repDf$trumpFactor)
table(trueClass)
eModel <- cv.glmnet(repMat, y=trueClass,  family = 'binomial', alpha=0.04, type.measure='class', standardize=TRUE)
plot(eModel)
plot(eModel$glmnet.fit, xvar='dev')
min(eModel$cvm)
cmat <- as.matrix(coef(eModel, s = "lambda.min"))
coes <- data.frame(estimate=cmat[,1], words=row.names(cmat) ) %>% arrange(estimate)
coDict<- data.frame(word=coes$words, co=coes[1])  %>% filter(estimate !=0) %>% filter(word!='(Intercept)')
coDict$one<- ifelse(coDict$estimate > 0, coDict$estimate, 0)
coDict$zero <- ifelse(coDict$estimate < 0, coDict$estimate, 0)
wct <- data.frame(Trump=coDict$one, Other=coDict$zero)
rownames(wct) <- coDict$word
wordcloud::comparison.cloud((as.matrix(wct)),title.size=1.5, random.order=FALSE, rot.per=0, max.words=200)
nt <- "I have a tremendous brain. I know many of the finest businesses. "
nt <- "I believe that American families have a right to hard-working immigrants. "
nd1 <- dfm(nt, keptFeatures = repDfm) %>% removeFeatures(c(stopwords('english'), extra)) %>% as.matrix
nd1[is.nan(nd1)] = 0
predict(eModel, nd1, s = "lambda.min", type = "response")
nt <- "I have a tremendous brain. I know many of the finest businesses. "
#nt <- "I believe that American families have a right to hard-working immigrants. "
nd1 <- dfm(nt, keptFeatures = repDfm) %>% removeFeatures(c(stopwords('english'), extra)) %>% as.matrix
nd1[is.nan(nd1)] = 0
predict(eModel, nd1, s = "lambda.min", type = "response")
save(eModel, file='trumpModel.RData')
?load
load('trumpModel.RData')
?barplot(10)
barplot(10)
runApp('shinyHack')
setwd("~/Dropbox/hackathon")
require(shiny)
runApp('shinyHack')
?load
runApp('shinyHack')
runApp('shinyHack')
runApp('shinyHack')
runApp('shinyHack')
?textInput
runApp('shinyHack')
runApp('shinyHack')
?textInput
runApp('shinyHack')
runApp('shinyHack')
?reactive
runApp('shinyHack')
runApp('shinyHack')
runApp('shinyHack')
