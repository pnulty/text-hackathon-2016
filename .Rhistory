nd1 <- dfm(nt, keptFeatures = mainDfm) %>% removeFeatures(c(stopwords('english'), extra)) %>% as.matrix
predict(eModelMain, nd1, s = "lambda.min", type = "response")
nt <- "Madam Secretary, Hilary, is a friend of wall street. Millionaires "
nd1 <- dfm(nt, keptFeatures = mainDfm) %>% removeFeatures(c(stopwords('english'), extra)) %>% as.matrix
predict(eModelMain, nd1, s = "lambda.min", type = "response")
nt <- "Donald is not a credible sensible candidate with values. "
#nt <- "I believe that American families have a right to hard-working immigrants. "
nd1 <- dfm(nt, keptFeatures = mainDfm) %>% removeFeatures(c(stopwords('english'), extra)) %>% as.matrix
nd1[is.nan(nd1)] = 0
predict(eModelMain, nd1, s = "lambda.min", type = "response")
nt <- "Donald is candidate. Obama knows what he is doing."
#nt <- "I believe that American families have a right to hard-working immigrants. "
nd1 <- dfm(nt, keptFeatures = mainDfm) %>% removeFeatures(c(stopwords('english'), extra)) %>% as.matrix
nd1[is.nan(nd1)] = 0
predict(eModelMain, nd1, s = "lambda.min", type = "response")
mainDfm <- dfm(mainDf$speech, ngrams=c(1,2)) %>%
removeFeatures(c(stopwords('english'), extra)) %>% trim(minCount = 5)
mainMat <- as.matrix(mainDfm)
#wordcloud::comparison.cloud(t(repMat), title.size=1.3, random.order=FALSE, rot.per = 0, max.words = 200)
trueClass <- as.factor(mainDf$tag)
dim(mainMat)
length(trueClass)
table(trueClass)
eModelMain <- cv.glmnet(mainMat, y=trueClass,  family = 'multinomial', alpha=0.04, type.measure='class', standardize=TRUE)
plot(eModelMain)
min(eModelMain$cvm)
nt <- "Donald is a candidate. Obama knows what he is doing."
#nt <- "I believe that American families have a right to hard-working immigrants. "
nd1 <- dfm(nt, keptFeatures = mainDfm, ngrams=c(1,2)) %>% removeFeatures(c(stopwords('english'), extra)) %>% as.matrix
nd1[is.nan(nd1)] = 0
predict(eModelMain, nd1, s = "lambda.min", type = "response")
nt <- " is a candidate. Obama knows what he is doing."
#nt <- "I believe that American families have a right to hard-working immigrants. "
nd1 <- dfm(nt, keptFeatures = mainDfm, ngrams=c(1,2)) %>% removeFeatures(c(stopwords('english'), extra)) %>% as.matrix
nd1[is.nan(nd1)] = 0
predict(eModelMain, nd1, s = "lambda.min", type = "response")
nt <- " is a candidate. United states knows what he is doing."
#nt <- "I believe that American families have a right to hard-working immigrants. "
nd1 <- dfm(nt, keptFeatures = mainDfm, ngrams=c(1,2)) %>% removeFeatures(c(stopwords('english'), extra)) %>% as.matrix
nd1[is.nan(nd1)] = 0
predict(eModelMain, nd1, s = "lambda.min", type = "response")
nt <- "when I am president I will represent the people"
#nt <- "I believe that American families have a right to hard-working immigrants. "
nd1 <- dfm(nt, keptFeatures = mainDfm, ngrams=c(1,2)) %>% removeFeatures(c(stopwords('english'), extra)) %>% as.matrix
nd1[is.nan(nd1)] = 0
predict(eModelMain, nd1, s = "lambda.min", type = "response")
nt <- "A conservative movement committed to the cause of free enterprise, the only economic model where everyone can climb without anyone falling. "
#nt <- "I believe that American families have a right to hard-working immigrants. "
nd1 <- dfm(nt, keptFeatures = mainDfm, ngrams=c(1,2)) %>% removeFeatures(c(stopwords('english'), extra)) %>% as.matrix
nd1[is.nan(nd1)] = 0
predict(eModelMain, nd1, s = "lambda.min", type = "response")
predict(eModelMain, nd1, s = "lambda.min", type = "link")
runApp('shinyHack')
runApp('shinyHack')
?textInput
runApp('shinyHack')
runApp('shinyHack')
runApp('shinyHack')
runApp('shinyHack')
runApp('shinyHack')
runApp('shinyHack')
?pageWithSidebar
?sidebarPanel
runApp('shinyHack')
runApp('shinyHack')
?headerPanel
runApp('shinyHack')
runApp('shinyHack')
runApp('shinyHack')
runApp('shinyHack')
runApp('shinyHack')
?sidebarPanel
?textInput
runApp('shinyHack')
runApp('shinyHack')
cmat <- as.matrix(coef(eModelMain, s = "lambda.min"))
coes <- data.frame(estimate=cmat[,1], words=row.names(cmat) ) %>% arrange(estimate)
coes <- data.frame(estimate=cmat[,1], words=row.names(cmat) ) %>% arrange(estimate)
head(cmat)
trueClass <- as.factor(mainDf$party)
dim(mainMat)
length(trueClass)
table(trueClass)
eModelMain <- cv.glmnet(mainMat, y=trueClass,  family = 'multinomial', alpha=0.04, type.measure='class', standardize=TRUE)
plot(eModelMain)
min(eModelMain$cvm)
nt <- "A conservative movement committed to the cause of free enterprise, the only economic model where everyone can climb without anyone falling. "
#nt <- "I believe that American families have a right to hard-working immigrants. "
nd1 <- dfm(nt, keptFeatures = mainDfm, ngrams=c(1,2)) %>% removeFeatures(c(stopwords('english'), extra)) %>% as.matrix
nd1[is.nan(nd1)] = 0
predict(eModelMain, nd1, s = "lambda.min", type = "response")
mainCorpus <- subset(presDebateCorpus2016seg, tag %in% c('SANDERS', 'CLINTON', 'TRUMP', 'RUBIO'))
#remove very short utterances
mainDf <- cbind(speech = texts(mainCorpus), docvars(mainCorpus), stringsAsFactors = FALSE)
mainDf <- filter(mainDf, nchar(speech) > 50)
mainDfm <- dfm(mainDf$speech, ngrams=c(1,2)) %>%
removeFeatures(c(stopwords('english'), extra)) %>% trim(minCount = 5)
mainMat <- as.matrix(mainDfm)
#wordcloud::comparison.cloud(t(repMat), title.size=1.3, random.order=FALSE, rot.per = 0, max.words = 200)
trueClass <- as.factor(mainDf$tag)
dim(mainMat)
length(trueClass)
table(trueClass)
eModelMain <- cv.glmnet(mainMat, y=trueClass,  family = 'multinomial', alpha=0.04, type.measure='class', standardize=TRUE)
plot(eModelMain)
min(eModelMain$cvm)
nt <- "A conservative movement committed to the cause of free enterprise, the only economic model where everyone can climb without anyone falling. "
#nt <- "I believe that American families have a right to hard-working immigrants. "
nd1 <- dfm(nt, keptFeatures = mainDfm, ngrams=c(1,2)) %>% removeFeatures(c(stopwords('english'), extra)) %>% as.matrix
nd1[is.nan(nd1)] = 0
predict(eModelMain, nd1, s = "lambda.min", type = "response")
?as.factor
trueClass <- as.factor(mainDf$tag, levels = c('SANDERS', 'CLINTON', 'RUBIO', 'TRUMP'))
mainDf <- cbind(speech = texts(mainCorpus), docvars(mainCorpus), stringsAsFactors = FALSE)
mainDf <- filter(mainDf, nchar(speech) > 50)
mainDfm <- dfm(mainDf$speech, ngrams=c(1,2)) %>%
removeFeatures(c(stopwords('english'), extra)) %>% trim(minCount = 5)
mainMat <- as.matrix(mainDfm)
#wordcloud::comparison.cloud(t(repMat), title.size=1.3, random.order=FALSE, rot.per = 0, max.words = 200)
partyClass <- as.factor(mainDf$party)
dim(mainMat)
length(trueClass)
table(trueClass)
plot(eModelParty)
eModelParty <- cv.glmnet(mainMat, y=partyClass,  family = 'multinomial', alpha=0.04, type.measure='class', standardize=TRUE)
runApp('shinyHack')
runApp('shinyHack')
runApp('shinyHack')
runApp('shinyHack')
runApp('shinyHack')
runApp('shinyHack')
?barplot
runApp('shinyHack')
runApp('shinyHack')
runApp('shinyHack')
tmp <- predict(eModelMain, nd1, s = "lambda.min", type = "response")
tmp
colnames(tmp)
as.numeric(tmp)
runApp('shinyHack')
class(tmp)
tmp1 <- as.vector(tmp)
tmp1
names(tmp1)
tmp1 <- data.matrix(tmp)
tmp1
tmp1 <- as.matrix(tmp)
tmp1
tmp1 <- as.numeric(tmp)
tmp1
tmp
?as.numeric
names(tmp)
tmp
colnames(tmp)
tmp1 <- as.numeric(tmp, drop=FALSE)
tmp1
tmp1 <- as.vector(tmp, drop=FALSE)
tmp1 <- as.vector(tmp, drop=FALS)
tmp1 <- as.vector(tmp)
tmp1
?barplot
names(tmp)
colnames(tmp)
runApp('shinyHack')
runApp('shinyHack')
runApp('shinyHack')
?fluidRow
runApp('shinyHack')
runApp('shinyHack')
runApp('shinyHack')
runApp('shinyHack')
table(trueClass)
View(mainDf)
mainDf <- cbind(speech = texts(mainCorpus), docvars(mainCorpus), stringsAsFactors = FALSE)
mainDf <- filter(mainDf, nchar(speech) > 20)
table(mainDf$tag)
mainDf <- filter(mainDf, nchar(speech) > 100)
table(mainDf$tag)
mainDf <- filter(mainDf, nchar(speech) > 70)
mainDf <- cbind(speech = texts(mainCorpus), docvars(mainCorpus), stringsAsFactors = FALSE)
mainDf <- filter(mainDf, nchar(speech) > 70)
table(mainDf$tag)
mainDf <- cbind(speech = texts(mainCorpus), docvars(mainCorpus), stringsAsFactors = FALSE)
mainDf <- filter(mainDf, nchar(speech) > 70)
mainDfm <- dfm(mainDf$speech, ngrams=c(1,2)) %>%
removeFeatures(c(stopwords('english'), extra)) %>% trim(minCount = 5)
mainMat <- as.matrix(mainDfm)
partyClass <- as.factor(mainDf$party)
dim(mainMat)
length(trueClass)
table(trueClass)
eModelParty <- cv.glmnet(mainMat, y=partyClass,  family = 'multinomial', alpha=0.04, type.measure='class', standardize=TRUE)
plot(eModelParty)
min(eModelParty$cvm)
mainCorpus <- subset(presDebateCorpus2016seg, tag %in% c('SANDERS', 'CLINTON', 'TRUMP', 'RUBIO'))
#remove very short utterances
mainDf <- cbind(speech = texts(mainCorpus), docvars(mainCorpus), stringsAsFactors = FALSE)
mainDf <- filter(mainDf, nchar(speech) > 70)
mainDfm <- dfm(mainDf$speech, ngrams=c(1,2)) %>%
removeFeatures(c(stopwords('english'), extra)) %>% trim(minCount = 5)
mainMat <- as.matrix(mainDfm)
trueClass <- as.factor(mainDf$tag)
dim(mainMat)
length(trueClass)
table(trueClass)
eModelMain <- cv.glmnet(mainMat, y=trueClass,  family = 'multinomial', alpha=0.04, type.measure='class', standardize=TRUE)
plot(eModelMain)
min(eModelMain$cvm)
runApp('shinyHack')
?sample_n
runApp('shinyHack')
mainDf <- cbind(speech = texts(mainCorpus), docvars(mainCorpus), stringsAsFactors = FALSE)
mainDf <- filter(mainDf, nchar(speech) > 70)
table(mainDf$tag)
mainDf <- cbind(speech = texts(mainCorpus), docvars(mainCorpus), stringsAsFactors = FALSE)
mainDf <- filter(mainDf, nchar(speech) > 80)
table(mainDf$tag)
#remove very short utterances (cutting at 80 characters also gives roughly balanced classes.)
mainDf <- cbind(speech = texts(mainCorpus), docvars(mainCorpus), stringsAsFactors = FALSE)
mainDf <- filter(mainDf, nchar(speech) > 80)
table(mainDf$tag)
mainDfm <- dfm(mainDf$speech, ngrams=c(1,2)) %>%
removeFeatures(c(stopwords('english'), extra)) %>% trim(minCount = 5)
mainMat <- as.matrix(mainDfm)
partyClass <- as.factor(mainDf$party)
dim(mainMat)
length(trueClass)
table(trueClass)
eModelParty <- cv.glmnet(mainMat, y=partyClass,  family = 'multinomial', alpha=0.04, type.measure='class', standardize=TRUE)
plot(eModelParty)
min(eModelParty$cvm)
# predict new text
nt <- "A conservative movement committed to the cause of free enterprise, the only economic model where everyone can climb without anyone falling. "
#nt <- "I believe that American families have a right to hard-working immigrants. "
nd1 <- dfm(nt, keptFeatures = mainDfm, ngrams=c(1,2)) %>% removeFeatures(c(stopwords('english'), extra)) %>% as.matrix
mainCorpus <- subset(presDebateCorpus2016seg, tag %in% c('SANDERS', 'CLINTON', 'TRUMP', 'RUBIO'))
#remove very short utterances
mainDf <- cbind(speech = texts(mainCorpus), docvars(mainCorpus), stringsAsFactors = FALSE)
mainDf <- filter(mainDf, nchar(speech) > 80)
mainDfm <- dfm(mainDf$speech, ngrams=c(1,2)) %>%
removeFeatures(c(stopwords('english'), extra)) %>% trim(minCount = 5)
mainMat <- as.matrix(mainDfm)
trueClass <- as.factor(mainDf$tag)
dim(mainMat)
length(trueClass)
table(trueClass)
eModelMain <- cv.glmnet(mainMat, y=trueClass,  family = 'multinomial', alpha=0.04, type.measure='class', standardize=TRUE)
plot(eModelMain)
runApp('shinyHack')
?textInput
runApp('shinyHack')
runApp('shinyHack')
runApp('shinyHack')
runApp('shinyHack')
runApp('shinyHack')
runApp('shinyHack')
runApp('shinyHack')
runApp('shinyHack')
runApp('shinyHack')
runApp('shinyHack')
runApp('shinyHack')
runApp('shinyHack')
runApp('shinyHack')
runApp('shinyHack')
runApp('shinyHack')
runApp('shinyHack')
runApp('shinyHack')
runApp('shinyHack')
?comparison.cloud
require(wordcloud)
?comparison.cloud
mainCorpus <- subset(presDebateCorpus2016seg, tag %in% c('SANDERS', 'CLINTON', 'TRUMP', 'CRUZ'))
#remove very short utterances
mainDf <- cbind(speech = texts(mainCorpus), docvars(mainCorpus), stringsAsFactors = FALSE)
mainDf <- filter(mainDf, nchar(speech) > 80)
mainCorpus <- subset(presDebateCorpus2016seg, tag %in% c('SANDERS', 'CLINTON', 'TRUMP', 'CRUZ'))
summary(mainCorpus)
presDebateDf <- cbind(speech = texts(presDebateCorpus2016seg), docvars(presDebateCorpus2016seg), stringsAsFactors = FALSE)
cruzCorpus <- subset(presDebateCorpus2016seg, tag %in% c('SANDERS', 'CLINTON', 'TRUMP', 'CRUZ'))
mainCorpus <- subset(presDebateCorpus2016seg, tag %in% c('SANDERS', 'CLINTON', 'TRUMP', 'CRUZ'))
#remove very short utterances
mainDf <- cbind(speech = texts(mainCorpus), docvars(mainCorpus), stringsAsFactors = FALSE)
mainDf <- filter(mainDf, nchar(speech) > 80)
mainDfm <- dfm(mainDf$speech, ngrams=c(1,2)) %>%
presDebateDf <- cbind(speech = texts(presDebateCorpus2016seg), docvars(presDebateCorpus2016seg), stringsAsFactors = FALSE)
presDebateDf <- cbind(speech = texts(presDebateCorpus2016seg), docvars(presDebateCorpus2016seg), stringsAsFactors = FALSE)
require(magrittr)
require(dplyr)
require(tidyr)
require(wordcloud)
require(glmnet)
mainCorpus <- subset(presDebateCorpus2016seg, tag %in% c('SANDERS', 'CLINTON', 'TRUMP', 'CRUZ'))
#remove very short utterances
mainDf <- cbind(speech = texts(mainCorpus), docvars(mainCorpus), stringsAsFactors = FALSE)
mainDf <- filter(mainDf, nchar(speech) > 80)
mainDfm <- dfm(mainDf$speech, ngrams=c(1,2)) %>%
removeFeatures(c(stopwords('english'), extra)) %>% trim(minCount = 5)
mainMat <- as.matrix(mainDfm)
trueClass <- as.factor(mainDf$tag)
dim(mainMat)
length(trueClass)
table(trueClass)
eModelMain <- cv.glmnet(mainMat, y=trueClass,  family = 'multinomial', alpha=0.04, type.measure='class', standardize=TRUE)
plot(eModelMain)
min(eModelMain$cvm)
mainDf <- cbind(speech = texts(mainCorpus), docvars(mainCorpus), stringsAsFactors = FALSE)
mainDf <- filter(mainDf, nchar(speech) > 80)
table(mainDf$tag)
mainCorpus <- subset(presDebateCorpus2016seg, tag %in% c('SANDERS', 'CLINTON', 'TRUMP', 'RUBIO', 'CRUZ'))
#remove very short utterances
mainDf <- cbind(speech = texts(mainCorpus), docvars(mainCorpus), stringsAsFactors = FALSE)
mainDf <- filter(mainDf, nchar(speech) > 80)
mainDfm <- dfm(mainDf$speech, ngrams=c(1,2)) %>%
removeFeatures(c(stopwords('english'), extra)) %>% trim(minCount = 5)
mainMat <- as.matrix(mainDfm)
trueClass <- as.factor(mainDf$tag)
dim(mainMat)
length(trueClass)
table(trueClass)
eModelMain <- cv.glmnet(mainMat, y=trueClass,  family = 'multinomial', alpha=0.04, type.measure='class', standardize=TRUE)
plot(eModelMain)
min(eModelMain$cvm)
shiny::runApp('shinyHack')
mainDf <- cbind(speech = texts(mainCorpus), docvars(mainCorpus), stringsAsFactors = FALSE)
mainDf <- filter(mainDf, nchar(speech) > 80)
table(mainDf$tag)
mainDfm <- dfm(mainDf$speech, ngrams=c(1,2)) %>%
removeFeatures(c(stopwords('english'), extra)) %>% trim(minCount = 5)
mainMat <- as.matrix(mainDfm)
partyClass <- as.factor(mainDf$party)
dim(mainMat)
length(trueClass)
table(trueClass)
mainCorpus <- subset(presDebateCorpus2016seg, tag %in% c('SANDERS', 'CLINTON', 'TRUMP', 'RUBIO', 'CRUZ'))
#remove very short utterances
mainDf <- cbind(speech = texts(mainCorpus), docvars(mainCorpus), stringsAsFactors = FALSE)
mainDf <- filter(mainDf, nchar(speech) > 80)
mainDfm <- dfm(mainDf$speech, ngrams=c(1,2,3)) %>%
removeFeatures(c(stopwords('english'), extra)) %>% trim(minCount = 5)
mainMat <- as.matrix(mainDfm)
trueClass <- as.factor(mainDf$tag)
dim(mainMat)
length(trueClass)
table(trueClass)
eModelMain <- cv.glmnet(mainMat, y=trueClass,  family = 'multinomial', alpha=0.04, type.measure='class', standardize=TRUE)
plot(eModelMain)
min(eModelMain$cvm)
runApp('shinyHack')
require(magrittr)
require(quanteda)
require(dplyr)
require(quanteda)
require(magrittr)
require(dplyr)
require(tidyr)
require(wordcloud)
require(glmnet)
shiny::runApp('shinyHack')
#remove very short utterances (cutting at 80 characters also gives roughly balanced classes.)
mainDf <- cbind(speech = texts(mainCorpus), docvars(mainCorpus), stringsAsFactors = FALSE)
mainDf <- filter(mainDf, nchar(speech) > 80)
table(mainDf$tag)
mainDfm <- dfm(mainDf$speech, ngrams=c(1,2,3)) %>%
removeFeatures(c(stopwords('english'), extra)) %>% trim(minCount = 5)
mainMat <- as.matrix(mainDfm)
partyClass <- as.factor(mainDf$party)
dim(mainMat)
length(trueClass)
table(trueClass)
eModelParty <- cv.glmnet(mainMat, y=partyClass,  family = 'multinomial', alpha=0.05, type.measure='class', standardize=TRUE)
plot(eModelParty)
min(eModelParty$cvm)
plot(eModelParty$glmnet.fit)
cmat <- as.matrix(coef(eModel, s = "lambda.min"))
cmat <- as.matrix(coef(eModelParty, s = "lambda.min"))
coes <- data.frame(estimate=cmat[,1], words=row.names(cmat) ) %>% arrange(estimate)
cmat <- as.matrix(coef(eModelParty, s = "lambda.min"))
coes <- data.frame(estimate=cmat[,1], words=row.names(cmat) ) %>% arrange(estimate)
tmp <- coes(eModelParty)
tmp <- coef(eModelParty)
#remove very short utterances (cutting at 80 characters also gives roughly balanced classes.)
mainDf <- cbind(speech = texts(mainCorpus), docvars(mainCorpus), stringsAsFactors = FALSE)
mainDf <- filter(mainDf, nchar(speech) > 80)
table(mainDf$tag)
mainDfm <- dfm(mainDf$speech, ngrams=c(1,2,3)) %>%
removeFeatures(c(stopwords('english'), extra)) %>% trim(minCount = 5)
mainMat <- as.matrix(mainDfm)
partyClass <- as.factor(mainDf$party)
dim(mainMat)
length(trueClass)
table(trueClass)
eModelParty <- cv.glmnet(mainMat, y=partyClass,  family = 'binomial', alpha=0.05, type.measure='class', standardize=TRUE)
plot(eModelParty)
min(eModelParty$cvm)
cmat <- as.matrix(coef(eModelParty, s = "lambda.min"))
coes <- data.frame(estimate=cmat[,1], words=row.names(cmat) ) %>% arrange(estimate)
wordWeights<- data.frame(word=coes$words, co=coes[1])  %>% filter(estimate !=0) %>% filter(word!='(Intercept)')
View(wordWeights)
View(wordWeights)
wordWeights$Republican <- ifelse(wordWeights$Dim1 > 0, wordWeights$Dim1, 0)
wordWeights$Democrat <- ifelse(wordWeights$Dim1 < 0, wordWeights$Dim1, 0)
wordWeights$Republican <- ifelse(wordWeights$estimate > 0, wordWeights$estimate, 0)
wordWeights$Democrat <- ifelse(wordWeights$estimate < 0, wordWeights$estimate, 0)
wct <- data.frame(Republican=wordWeights$Republican , Democrat=wordWeights$Democrat)
rownames(wct) <- rownames(wordWeights)
wordcloud::comparison.cloud((as.matrix(wct)),title.size=1.5,
random.order=FALSE, rot.per=0, scale=c(1,3))
wordWeights
rownames(wct) <- wordWeights$word
wordcloud::comparison.cloud((as.matrix(wct)),title.size=1.5,
random.order=FALSE, rot.per=0, scale=c(1,3))
random.order=FALSE, rot.per=0, scale=c(1,3))
wordcloud::comparison.cloud((as.matrix(wct)),title.size=1.5,
random.order=FALSE, rot.per=0, scale=c(1,3))
tmp <- coef(eModelMain)
tmpdf <- as.data.frame(tmp)
tmpdf <- data.frame(tmp$CLINTON, tmp$CRUZ)
class(tmp$CLINTON)
mainCorpus <- subset(presDebateCorpus2016seg, tag %in% c('SANDERS', 'CLINTON', 'TRUMP', 'RUBIO', 'CRUZ'))
#remove very short utterances
mainDf <- cbind(speech = texts(mainCorpus), docvars(mainCorpus), stringsAsFactors = FALSE)
mainDf <- filter(mainDf, nchar(speech) > 80)
mainDfm <- dfm(mainDf$speech, ngrams=c(1,2,3)) %>%
removeFeatures(c(stopwords('english'), extra)) %>% trim(minCount = 5)
mainMat <- as.matrix(mainDfm)
trueClass <- as.factor(mainDf$tag)
dim(mainMat)
length(trueClass)
table(trueClass)
eModelMain <- cv.glmnet(mainMat, y=trueClass,  family = 'multinomial', alpha=0.04, type.measure='class', standardize=TRUE)
plot(eModelMain)
dim(mainMat)
length(trueClass)
min(eModelMain$cvm)
summary(eModelMain)
tmp <- summary(eModelMain)
tmp$nzero
eModelMain$nzero
eModelMain$lambda.min
eModelMain$glmnet.fit$df
tmp <- eModelMain$glmnet.fit$dfmat
View(tmp)
eModelMain$cvm
mainDf <- cbind(speech = texts(mainCorpus), docvars(mainCorpus), stringsAsFactors = FALSE)
mainDf <- filter(mainDf, nchar(speech) > 80)
table(mainDf$tag)
mainDfm <- dfm(mainDf$speech, ngrams=c(1,2,3)) %>%
removeFeatures(c(stopwords('english'), extra)) %>% trim(minCount = 5)
mainMat <- as.matrix(mainDfm)
partyClass <- as.factor(mainDf$party)
dim(mainMat)
length(trueClass)
table(trueClass)
eModelParty <- cv.glmnet(mainMat, y=partyClass,  family = 'binomial', alpha=0.05, type.measure='class', standardize=TRUE)
plot(eModelParty)
min(eModelParty$cvm)
plot(eModelParty)
min(eModelParty$cvm)
eModelParty$cvm
min(eModelParty$cvm)
eModelParty$glmnet.fit$df
dim(mainMat)
eModelParty$glmnet.fit$df
eModelParty$cvm
eModelMain$glmnet.fit$dfmat
runApp('shinyHack')
nt <- "A conservative movement committed to the cause of free enterprise, the only economic model where everyone can climb without anyone falling. "
#nt <- "I believe that American families have a right to hard-working immigrants. "
nd1 <- dfm(nt, keptFeatures = mainDfm, ngrams=c(1,2)) %>% removeFeatures(c(stopwords('english'), extra)) %>% as.matrix
nd1[is.nan(nd1)] = 0
tmp <- predict(eModelParty, nd1, s = "lambda.min", type = "response")
tmp
runApp('shinyHack')
runApp('shinyHack')
?barplot
runApp('shinyHack')
runApp('shinyHack')
runApp('shinyHack')
runApp('shinyHack')
runApp('shinyHack')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='textvishackathon2016', token='04BFAFD4D1311DFE46487873A82091C9', secret='4jIbUsYAG788zenxmqQnbBwm2VKsFjZDP1ZEB3k/')
setwd("~/Dropbox/hackathon")
rsconnect::deployApp('shinyhack')
rsconnect::deployApp('shinyHack')
rsconnect::showLogs(
)
rsconnect::showLogs(shinyHack)
runApp('shinyHack')
runApp('shinyHack')
runApp('shinyHack')
runApp('shinyHack')
cmat <- as.matrix(coef(eModelParty, s = "lambda.min"))
coes <- data.frame(estimate=cmat[,1], words=row.names(cmat) ) %>% arrange(estimate)
wordWeights<- data.frame(word=coes$words, co=coes[1])  %>% filter(estimate !=0) %>% filter(word!='(Intercept)')
wordWeights$Republican <- ifelse(wordWeights$estimate > 0, wordWeights$estimate, 0)
wordWeights$Democrat <- ifelse(wordWeights$estimate < 0, wordWeights$estimate, 0)
wct <- data.frame(Republican=wordWeights$Republican , Democrat=wordWeights$Democrat)
rownames(wct) <- wordWeights$word
wordcloud::comparison.cloud((as.matrix(wct)),title.size=1.5,
random.order=FALSE, rot.per=0, scale=c(1,3))
random.order=FALSE, rot.per=0, scale=c(1,3))
wordcloud::comparison.cloud((as.matrix(wct)),title.size=1.5,
random.order=FALSE, rot.per=0, scale=c(1,3))
?identify
kwic(presDebateCorpus2016seg, 'lemon')
kwic(presDebateCorpus2016seg, 'lemon')
runApp('shinyHack')
RVersion()
rVersion()
sessionInfo()
